#define TOC       0x34FBB0 //done

#define create_kernel_object_symbol   0x11FB0 // Confirmed
#define destroy_kernel_object_symbol   0x11914 // Confirmed
#define destroy_shared_kernel_object_symbol  0x11288 // Confirmed
#define open_kernel_object_symbol   0x12600 // Confirmed
#define open_shared_kernel_object_symbol  0x12410 // Confirmed
#define close_kernel_object_handle_symbol  0x11A30 // Confirmed

#define alloc_symbol     0x64824 // Confirmed
#define dealloc_symbol     0x64C60 // Confirmed
#define copy_to_user_symbol    0xF86C // Confirmed
#define copy_from_user_symbol    0xFA88 // Confirmed
#define copy_to_process_symbol    0xF924 // Confirmed
#define copy_from_process_symbol   0xF734 // Confirmed
#define page_allocate_symbol    0x60394 // Confirmed
#define page_free_symbol    0x5FDF8 // Confirmed
#define page_export_to_proc_symbol   0x60530 // Confirmed
#define page_unexport_from_proc_symbol          0x5FCEC // Confirmed
#define kernel_ea_to_lpar_addr_symbol   0x7014C // Confirmed
#define process_ea_to_lpar_addr_ex_symbol  0x77760 // Confirmed
#define set_pte_symbol                                  0x5E390 // Confirmed
#define map_process_memory_symbol   0x7726C // Confirmed
#define panic_symbol     0x26D5C8 // Confirmed

#define memcpy_symbol     0x7E92C // Confirmed
#define memset_symbol     0x4D66C // Confirmed
#define memcmp_symbol     0x4C97C // Confirmed
#define memchr_symbol     0x4C92C // Confirmed
#define printf_symbol     0x2706AC // Confirmed
#define printfnull_symbol    0x275120 // Confirmed
#define sprintf_symbol     0x4EA94 // Confirmed
#define snprintf_symbol     0x4EA00 // Confirmed
#define strcpy_symbol     0x4D818 // Confirmed
#define strncpy_symbol     0x4D8E0 // Confirmed
#define strlen_symbol     0x4D840 // Confirmed
#define strcat_symbol     0x4D748 // Confirmed
#define strcmp_symbol     0x4D7C4 // Confirmed
#define strncmp_symbol     0x4D86C // Confirmed
#define strchr_symbol     0x4D780 // Confirmed
#define strrchr_symbol     0x4D950 // Confirmed

#define spin_lock_irqsave_ex_symbol   0x26D798 // Confirmed
#define spin_unlock_irqrestore_ex_symbol  0x26D76C // Confirmed

#define create_process_common_symbol   0x26B534 // Confirmed
#define create_process_base_symbol   0x26ABF0 // Confirmed
#define load_process_symbol    0x5004 // Confirmed
#define process_kill_symbol    0x26B340 // Confirmed

#define ppu_thread_create_symbol   0x13EC8 // Confirmed
#define ppu_thread_exit_symbol    0x13F80 // Confirmed
#define ppu_thread_join_symbol    0x13FD4 // Confirmed
#define ppu_thread_delay_symbol    0x287A4 // Confirmed
#define create_kernel_thread_symbol   0x24B20 // Confirmed
#define create_user_thread_symbol   0x2525C // Confirmed
#define create_user_thread2_symbol   0x25080 // Confirmed
#define start_thread_symbol    0x23D4C // Confirmed
#define run_thread_symbol    0x2357C // Confirmed
#define register_thread_symbol    0x26794C // Confirmed
#define allocate_user_stack_symbol   0x268134 // Confirmed
#define deallocate_user_stack_symbol   0x26809C // Confirmed

#define mutex_create_symbol    0x1363C // Confirmed
#define mutex_destroy_symbol    0x135D4 // Confirmed
#define mutex_lock_symbol    0x135CC // Confirmed
#define mutex_lock_ex_symbol    0x1DB5C // Confirmed
#define mutex_trylock_symbol    0x135C8 // Confirmed
#define mutex_unlock_symbol    0x135C4 // Confirmed

#define cond_create_symbol    0x137A8 // Confirmed
#define cond_destroy_symbol    0x13758 // Confirmed
#define cond_wait_symbol    0x13750 // Confirmed
#define cond_wait_ex_symbol    0x1F148 // Confirmed
#define cond_signal_symbol    0x1372C // Confirmed
#define cond_signal_all_symbol    0x13708 // Confirmed

#define semaphore_initialize_symbol   0x30C54 // Confirmed
#define semaphore_wait_ex_symbol   0x3095C // Confirmed
#define semaphore_trywait_symbol   0x30544 // Confirmed
#define semaphore_post_ex_symbol   0x30690 // Confirmed

#define event_port_create_symbol   0x13078 // Confirmed
#define event_port_destroy_symbol   0x134E0 // Confirmed
#define event_port_connect_symbol   0x13558 // Confirmed
#define event_port_disconnect_symbol   0x13484 // Confirmed
#define event_port_send_symbol    0x13070 // Confirmed
#define event_port_send_ex_symbol   0x2B204 // Confirmed

#define event_queue_create_symbol   0x13380 // Confirmed
#define event_queue_destroy_symbol   0x13308 // Confirmed
#define event_queue_receive_symbol   0x1314C // Confirmed
#define event_queue_tryreceive_symbol   0x13218 // Confirmed

#define cellFsOpen_symbol    0x297900 // Confirmed
#define cellFsClose_symbol    0x297768 // Confirmed
#define cellFsRead_symbol    0x2978A4 // Confirmed
#define cellFsWrite_symbol    0x297810 // Confirmed
#define cellFsLseek_symbol    0x296E98 // Confirmed
#define cellFsStat_symbol    0x29711C // Confirmed
#define cellFsUtime_symbol     0x298C08 // Confirmed
#define cellFsUnlink_internal_symbol   0x19C64C // Confirmed

#define cellFsUtilMount_symbol    0x296C78 // Confirmed
#define cellFsUtilUmount_symbol    0x296C4C // Confirmed
#define cellFsUtilNewfs_symbol    0x2986A0 // Confirmed

#define pathdup_from_user_symbol   0x29C8E4 // Confirmed
#define open_path_symbol    0x297638 // Confirmed
#define open_fs_object_symbol    0x18A970 //  Confirmed
#define close_fs_object_symbol    0x1898AC // Confirmed

#define storage_get_device_info_symbol   0x279B00 // Confirmed
#define storage_get_device_config_symbol  0x278F90 // Confirmed
#define storage_open_symbol    0x279510 //Confirmed
#define storage_close_symbol    0x279300 // Confirmed
#define storage_read_symbol    0x278870 //Confirmed
#define storage_write_symbol    0x278740 // Confirmed
#define storage_send_device_command_symbol  0x2783FC // Confirmed
#define storage_map_io_memory_symbol   0x2799BC // Confirmed
#define storage_unmap_io_memory_symbol          0x279888 // Confirmed
#define new_medium_listener_object_symbol  0x974C4 // Confirmed
#define delete_medium_listener_object_symbol  0x98CFC // Confirmed
#define set_medium_event_callbacks_symbol  0x99060 // Confirmed

#define cellUsbdRegisterLdd_symbol   0x26027C // Confirmed
#define cellUsbdUnregisterLdd_symbol   0x26022C // Confirmed
#define cellUsbdScanStaticDescriptor_symbol  0x26147C // Confirmed
#define cellUsbdOpenPipe_symbol           0x26152C // Confirmed
#define cellUsbdClosePipe_symbol   0x2614DC // Confirmed
#define cellUsbdControlTransfer_symbol   0x2613E0 // Confirmed
#define cellUsbdBulkTransfer_symbol   0x261360 // Confirmed

#define decrypt_func_symbol    0x34970 // Confirmed
#define lv1_call_99_wrapper_symbol   0x4EEA8 // Confirmed
#define modules_verification_symbol   0x58AB8 // Confirmed
#define authenticate_program_segment_symbol  0x5A910 // Confirmed

#define prx_load_module_symbol    0x88C04 // Confirmed
#define prx_start_module_symbol    0x878D0 // Confirmed
#define prx_stop_module_symbol    0x88CA8 // Confirmed
#define prx_unload_module_symbol   0x87604 // Confirmed
#define prx_get_module_info_symbol   0x8708C // Confirmed
#define prx_get_module_id_by_address_symbol  0x86F9C // Confirmed
#define prx_get_module_id_by_name_symbol  0x86FEC // Confirmed
#define prx_get_module_list_symbol   0x8710C // Confirmed
#define load_module_by_fd_symbol   0x88234 // Confirmed
#define parse_sprx_symbol    0x85FB8 // Confirmed
#define open_prx_object_symbol    0x7F4F8 // Confirmed
#define close_prx_object_symbol    0x7FE08 // Confirmed
#define lock_prx_mutex_symbol    0x86F44 // Confirmed
#define unlock_prx_mutex_symbol    0x86F50 // Confirmed

#define extend_kstack_symbol    0x700A4 // Confirmed

#define get_pseudo_random_number_symbol  0x228180 // Confirmed
#define md5_reset_symbol   0x161E20 // Confirmed
#define md5_update_symbol   0x1628C0 // Confirmed
#define md5_final_symbol   0x162A40 // Confirmed
#define ss_get_open_psid_symbol   0x22A668 // Confirmed
#define update_mgr_read_eeprom_symbol  0x223A78 // Confirmed
#define update_mgr_write_eeprom_symbol  0x2239C0 // Confirmed

#define ss_params_get_update_status_symbol  0x50AB4 // Confirmed















LV2_HOOKED_FUNCTION_POSTCALL_7(void, pre_map_process_memory, (void object, uint64_t process_addr, uint64_t size, uint64_t flags, void unk, void elf, uint64_t out))

{

 #ifdef  DEBUG

 //DPRINTF("Map %lx %lx %s\n", process_addr, size, get_current_process() ? get_process_name(get_current_process())+8 : "KERNEL");

 #endif

 

 // Not the call address, but the call to the caller (process load code for .self)

 if (get_call_address(1) == (void *)MKA(process_map_caller_call))

 {       

  if ((process_addr == 0x10000) && (size == dex_vsh_text_size) && (flags == 0x2008004) && (cleared_stage1 == 0))

  {        

           #ifdef  DEBUG

   DPRINTF("Making DEBUG VSH text writable, Size: 0x%lx\n", size);   

   #endif

   // Change flags, RX -> RWX, make vsh text writable

   set_patched_func_param(4, 0x2004004);

   // We can clear stage1. 

   if (cleared_stage1 == 0) {cleared_stage1 = 1; memset((void *)MKA(0x7f0000), 0, 0x10000);}

  }

       else if ((process_addr == 0x10000) && (size == cex_vsh_text_size) && (flags == 0x2008004) && (cleared_stage1 == 0))

  {

   #ifdef  DEBUG

   DPRINTF("Making Retail VSH text writable, Size: 0x%lx\n", size);   

   #endif

   // Change flags, RX -> RWX, make vsh text writable

   set_patched_func_param(4, 0x2004004);

   // We can clear stage1. 

   if (cleared_stage1 == 0) {cleared_stage1 = 1; memset((void *)MKA(0x7f0000), 0, 0x10000);}

  }

  else if  (flags == 0x2008004) set_patched_func_param(4, 0x2004004);// Change flags, RX -> RWX

 } 

}

