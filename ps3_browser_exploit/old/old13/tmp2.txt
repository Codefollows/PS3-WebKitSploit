
#sys_storage Syscalls (600-623+837+838)
600 	0x258 	CEXDEXDECR 	root 	sys_storage_open 	int sys_storage_open(uint64_t id, int mode, int *fd, int flags) mode=0,flags=0 DeviceIDs
601 	0x259 	CEXDEXDECR 		sys_storage_close 	int sys_storage_close(int fd)
602 	0x25A 	CEXDEXDECR 		sys_storage_read 	int sys_storage_read(int fd, int mode?, uint32_t start_sector, uint32_t sectors, uint8_t *bounce_buf, uint32_t *sectors_read, uint64_t flags) mode?=0
603 	0x25B 	CEXDEXDECR 		sys_storage_write 	
604 	0x25C 	CEXDEXDECR 		sys_storage_send_device_command 	int sys_storage_send_device_command(uint32_t device_handle, unsigned int command, void *indata, uint64_t inlen, void *outdata, uint64_t outlen)
605 	0x25D 	CEXDEXDECR 		sys_storage_async_configure 	int sys_storage_async_configure(uint32_t fd, sys_io_buffer_t io_buffer, sys_event_queue_t equeue_id, int *unknown)
606 	0x25E 	CEXDEXDECR 		sys_storage_async_read 	int sys_storage_async_read(int fd, int unknown_1, uint32_t start_sector, uint32_t sectors, sys_io_block_t bounce_buf, uint64_t user_data, int unknown_2) unknown_1=0, unknown_2=0
607 	0x25F 	CEXDEXDECR 		sys_storage_async_write 	7 Params:
608 	0x260 	CEXDEXDECR 		sys_storage_async_cancel 	2 Params
609 	0x261 	CEXDEXDECR 	root 	sys_storage_get_device_info 	int sys_storage_get_device_info(uint64_t device, uint8_t *buffer), buffer[40]=total sectors,buffer[48]=sector size,buffer[53]=writable
610 	0x262 	CEXDEXDECR 	root 	sys_storage_get_device_config 	2 Params: int sys_storage_get_device_config(uint64_t device, uint8_t *config) ?
611 	0x263 	CEXDEXDECR 	root 	sys_storage_report_devices 	4 Params:
612 	0x264 	CEXDEXDECR 	root 	sys_storage_configure_medium_event 	3 Params
613 	0x265 	CEXDEXDECR 		sys_storage_set_medium_polling_interval 	2 Params
614 	0x266 	CEXDEXDECR 		sys_storage_create_region 	
615 	0x267 	CEXDEXDECR 		sys_storage_delete_region 	int sys_storage_delete_region(uint32_t dev_id,uint64_t index);
616 	0x268 	CEXDEXDECR 		sys_storage_execute_device_command 	sys_storage_execute_device_command(uint32_t dev_handle, uint64_t cmd, const void *cmdbuf, uint64_t cmdbuf_size, void *databuf, uint64_t databuf_size, uint64_t *unknown)
617 	0x269 	CEXDEXDECR 		sys_storage_check_region_acl 	alias int sys_storage_get_region_acl(device_id, region_id, index, authority, mask);
618 	0x26A 	CEXDEXDECR 		sys_storage_set_region_acl 	int sys_storage_set_region_acl(device_id, region_id, authority, permission);
619 	0x26B 	CEXDEXDECR 		sys_storage_async_send_device_command 	sys_storage_async_send_device_command(uint32_t dev_handle, uint64_t cmd, const void *cmdbuf, uint64_t cmdbuf_size, void *databuf, uint64_t databuf_size, uint64_t *unknown)
620 	0x26C 	CEXDEXDECR 	root 		hid ldd if, kb/mouse/pad.... (param1: ?,0,1,2 or 3;param2;param3;param4;param5)
621 	0x26D 	CEXDEXDECR 		sys_gamepad_ycon_if 	syscall(621,packet_id,uint8_t *in,uint8_t *out) Talk:LV2_Functions_and_Syscalls#Syscall_621_.280x26D.29 gamepad_if usage
622 	0x26E 	CEXDEXDECR 		sys_storage_get_region_offset 	
623 	0x26F 	DECR 		sys_storage_set_emulated_speed 	
#sys_io Syscalls (624-627)
624 	0x270 	CEXDEXDECR 		sys_io_buffer_create 	int sys_io_buffer_create(int io_block_count, int block_size, int blocks, int unknown_3, sys_io_buffer_t *io_buffer)
625 	0x271 	CEXDEXDECR 		sys_io_buffer_destroy 	int sys_io_buffer_destroy(sys_io_buffer_t io_buffer)
626 	0x272 	CEXDEXDECR 		sys_io_buffer_allocate 	int sys_io_buffer_allocate(sys_io_buffer_t io_buffer, sys_io_block_t *block)
627 	0x273 	CEXDEXDECR 		sys_io_buffer_free 	int sys_io_buffer_free(sys_io_buffer_t io_buffer, sys_io_block_t block)
#sys_gpio Syscalls (630-631)
630 	0x276 	CEXDEXDECR 		sys_gpio_set 	int sys_gpio_set (uint64_t device_id, uint64_t mask, uint64_t value)
631 	0x277 	CEXDEXDECR 		sys_gpio_get 	int sys_gpio_get (uint64_t device_id, uint64_t *value)
#sys_fsw Syscalls (633-634)
633 	0x279 	DECR 		sys_fsw_connect_event 	int sys_fsw_connect_event(sys_event_queue_t eq_id)
634 	0x27A 	DECR 		sys_fsw_disconnect_event 	int sys_fsw_disconnect_event(void)
#Bluetooth Syscalls
635 	0x27B 	CEXDEXDECR 	root 	sys_btsetting_if? 	2 Params: uint64_t packet_id (0=init,1=finalize,....27) , uint8_t buffer
636 	0x27C 	CEXDEXDECR 	root 		(BT Database Lookup)
637 	0x27D 	CEXDEXDECR 	root 		BT dev list related, syscall(0x27d, out:uint8_t[0x100])
638 	0x27E 	CEXDEXDECR 	root 		BT related, 3 Params: packet_id (<7), input, output?
#USB Bluetooth Audio Syscalls (639-649)
639 	0x27F 	CEXDEXDECR 			"deprecated!" (seems Sony doesnt want/like USB Bluetooth Audio transmitter/receiver)
640 	0x280 	CEXDEXDECR 			"deprecated!"
641 	0x281 	CEXDEXDECR 			"deprecated!"
642 	0x282 	CEXDEXDECR 			"deprecated!"
643 	0x283 	CEXDEXDECR 			"deprecated!"
644 	0x284 	CEXDEXDECR 			"deprecated!"
645 	0x285 	CEXDEXDECR 			"deprecated!"
646 	0x286 	CEXDEXDECR 			"deprecated!"
647 	0x287 	CEXDEXDECR 			"deprecated!"
648 	0x288 	CEXDEXDECR 			"deprecated!"
649 	0x289 	CEXDEXDECR 			"deprecated!"
#RSX Audio Syscalls (650-x)
650 	0x28A 	CEXDEXDECR 		sys_rsxaudio_initialize 	int sys_rsxaudio_initialize(out:uint8[4])
651 	0x28B 	CEXDEXDECR 		sys_rsxaudio_finalize 	1 Params
652 	0x28C 	CEXDEXDECR 		sys_rsxaudio_import_shared_memory 	2 Params
653 	0x28D 	CEXDEXDECR 		sys_rsxaudio_unimport_shared_memory 	2 Params
654 	0x28E 	CEXDEXDECR 		sys_rsxaudio_create_connection 	1 Params
655 	0x28F 	CEXDEXDECR 		sys_rsxaudio_close_connection 	1 Params
656 	0x290 	CEXDEXDECR 		sys_rsxaudio_prepare_process 	1 Params
657 	0x291 	CEXDEXDECR 		sys_rsxaudio_start_process 	1 Params
658 	0x292 	CEXDEXDECR 		sys_rsxaudio_ 	1 Params
659 	0x293 	CEXDEXDECR 		sys_rsxaudio_ 	3 Params
#sys_rsx Syscalls (666-677)
666 	0x29A 	CEXDEXDECR 		sys_rsx_device_open 	1 Param (uint64_t arg_1);
667 	0x29B 	CEXDEXDECR 		sys_rsx_device_close 	(void);
668 	0x29C 	CEXDEXDECR 		sys_rsx_memory_allocate 	(uint32_t *mem_ctx_id, uint32_t *local_addr, uint64_t arg_4, uint64_t arg_5, uint64_t arg_6, uint64_t arg_7);
669 	0x29D 	CEXDEXDECR 		sys_rsx_memory_free 	(uint32_t mem_ctx_id);
670 	0x29E 	CEXDEXDECR 		sys_rsx_context_allocate 	(uint32_t *rsx_ctx_id, uint64_t *dma_control_lpar, uint64_t *driver_info_lpar, uint64_t *reports_lpar, uint32_t mem_ctx_id, uint64_t system_mode);
671 	0x29F 	CEXDEXDECR 		sys_rsx_context_free 	(uint32_t rsx_ctx_id);
672 	0x2A0 	CEXDEXDECR 		sys_rsx_context_iomap 	(uint32_t rsx_ctx_id, uint32_t local_offset, uint32_t main_mem_ea, uint32_t size, uint64_t flags);
673 	0x2A1 	CEXDEXDECR 		sys_rsx_context_iounmap 	(uint32_t rsx_ctx_id, uint64_t arg_2, uint64_t arg_3);
674 	0x2A2 	CEXDEXDECR 		sys_rsx_context_attribute 	(uint32_t rsx_ctx_id, uint32_t pkg_id, uint64_t arg_1, uint64_t arg_2, uint64_t arg_3, uint64_t arg_4);
675 	0x2A3 	CEXDEXDECR 		sys_rsx_device_map 	(uint64_t *semaphore, uint64_t arg_2, uint64_t device_id);
676 	0x2A4 	CEXDEXDECR 		sys_rsx_device_unmap 	(uint64_t device_id);
677 	0x2A5 	CEXDEXDECR 		sys_rsx_attribute 	(uint64_t pkg_id, uint64_t arg_1, uint64_t arg_2, uint64_t arg_3, uint64_t arg_4);
678 	0x2A6 	DEX DECR 			
679 	0x2A7 	CEXDEXDECR 	root 		(uint32_t arg_1, uint32_t arg_2, uint64_t *out_1, uint64_t *out_2, uint64_t *out_3, uint64_t *out_4);
#Bluetooth USB Audio Syscalls (680-696)
680 	0x2A8 	CEXDEXDECR 	root 		
681 	0x2A9 	CEXDEXDECR 	root 		
682 	0x2AA 	CEXDEXDECR 	root 		
683 	0x2AB 	CEXDEXDECR 	root 		
684 	0x2AC 	CEXDEXDECR 	root 		
685 	0x2AD 	CEXDEXDECR 	root 		
686 	0x2AE 	CEXDEXDECR 	root 		
687 	0x2AF 	CEXDEXDECR 	root 		
688 	0x2B0 	CEXDEXDECR 	root 		
689 	0x2B1 	CEXDEXDECR 	root 		
690 	0x2B2 	CEXDEXDECR 	root 		
691 	0x2B3 	CEXDEXDECR 	root 		
692 	0x2B4 	CEXDEXDECR 	root 		
693 	0x2B5 	CEXDEXDECR 	root 		
694 	0x2B6 	CEXDEXDECR 			"deprecated!" (usbbtaudio)
695 	0x2B7 	CEXDEXDECR 			"deprecated!" (usbbtaudio)
696 	0x2B8 	CEXDEXDECR 	root 		bt audio interface, packetid 0-4 (0= GetSinkConfig)
#sys_bdemu Syscalls (699)
699 	0x2BB 	DEX DECR 		sys_bdemu_send_command 	sys_bdemu_send_command(cmd, unused, unk1, result_buffer, result_buffer_len)
cmd 0: returns BDemu usb DeviceID
cmd 1: eject image (unk1 and result_buffer must be 0)
cmd 2: format bdemu hdd?
#sys_net Syscalls (700-726)
700 	0x2BC 	CEXDEXDECR 		sys_net_bnet_accept 	int sys_net_bnet_accept (int s, struct sockaddr *addr, socklen_t *paddrlen ) // s = socket descriptor
701 	0x2BD 	CEXDEXDECR 		sys_net_bnet_bind 	int sys_net_bnet_bind ( int s, const struct sockaddr *addr, socklen_t addrlen )
702 	0x2BE 	CEXDEXDECR 		sys_net_bnet_connect 	int sys_net_bnet_connect ( int s, const struct sockaddr *addr, socklen_t addrlen )
703 	0x2BF 	CEXDEXDECR 		sys_net_bnet_getpeername 	int sys_net_bnet_getpeername ( int s, struct sockaddr *addr, socklen_t *paddrlen )
704 	0x2C0 	CEXDEXDECR 		sys_net_bnet_getsockname 	int sys_net_bnet_getsockname ( int s, struct sockaddr *addr, socklen_t *paddrlen )
705 	0x2C1 	CEXDEXDECR 		sys_net_bnet_getsockopt 	int sys_net_bnet_getsockopt ( int s, int level, int optname, void *optval, socklen_t *optlen )
706 	0x2C2 	CEXDEXDECR 		sys_net_bnet_listen 	int sys_net_bnet_listen ( int s, int backlog )
707 	0x2C3 	CEXDEXDECR 		sys_net_bnet_recvfrom 	int sys_net_bnet_recvfrom ( int s, void *buf, size_t len, int flags, struct sockaddr *addr, socklen_t *paddrlen )
708 	0x2C4 	CEXDEXDECR 		sys_net_bnet_recvmsg 	int sys_net_bnet_recvmsg ( int s, struct msghdr *msg, int flags )
709 	0x2C5 	CEXDEXDECR 		sys_net_bnet_sendmsg 	int sys_net_bnet_sendmsg ( int s, const struct msghdr *msg, int flags )
710 	0x2C6 	CEXDEXDECR 		sys_net_bnet_sendto 	int sys_net_bnet_sendto ( int s, const void *buf, size_t len, int flags, const struct sockaddr *addr, socklen_t addrlen )
711 	0x2C7 	CEXDEXDECR 		sys_net_bnet_setsockop 	int sys_net_bnet_setsockop ( int s, int level, int optname, const void *optval, socklen_t optlen )
712 	0x2C8 	CEXDEXDECR 		sys_net_bnet_shutdown 	int sys_net_bnet_shutdown ( int s, int how )
713 	0x2C9 	CEXDEXDECR 		sys_net_bnet_socket 	int sys_net_bnet_socket ( int family, int type, int protocol )
714 	0x2CA 	CEXDEXDECR 		sys_net_bnet_close 	int sys_net_bnet_close ( int fd )
715 	0x2CB 	CEXDEXDECR 		sys_net_bnet_poll 	
716 	0x2CC 	CEXDEXDECR 		sys_net_bnet_select 	
717 	0x2CD 	CEXDEXDECR 		sys_net_open_dump 	int sys_net_open_dump ( int len, int flags )
718 	0x2CE 	CEXDEXDECR 		sys_net_read_dump 	int sys_net_read_dump ( int id, void *buf, int len, int *pflags )
719 	0x2CF 	CEXDEXDECR 		sys_net_close_dump 	int sys_net_close_dump ( int id, int *pflags )
720 	0x2D0 	CEXDEXDECR 		sys_net_write_dump 	int sys_net_write_dump ( char *buf )
721 	0x2D1 	CEXDEXDECR 		sys_net_abort 	int sys_net_abort (packet id <5: 0=abort socket,1=abort resolver ), sys_net_thread_id_t tid/int socket_descriptor, int flags )
722 	0x2D2 	CEXDEXDECR 		sys_net_infoctl 	
723 	0x2D3 	CEXDEXDECR 		sys_net_control 	
724 	0x2D4 	CEXDEXDECR 		sys_net_bnet_ioctl 	
725 	0x2D5 	CEXDEXDECR 		sys_net_bnet_sysctl 	
726 	0x2D6 	CEXDEXDECR 		sys_net_eurus_post_command 	int sys_net_eurus_post_command(uint16_t cmd, uint8_t *cmdbuf, uint64_t cmdbuf_size) Hypervisor_Reverse_Engineering#Commands_2 Commands
#lv2Fs Syscalls (801-834)
800 	0x320 	CEXDEXDECR 		sys_fs_test 	int sys_fs_test(packetid < 7 (6 tests) ,0,*deviceid,4,uint8* out[0x420],0x420)
801 	0x321 	CEXDEXDECR 		sys_fs_open 	CellFsErrno sys_fs_open(const char *path, int flags, int *fd, uint64_t mode, const void *arg, uint64_t size);
802 	0x322 	CEXDEXDECR 		sys_fs_read 	CellFsErrno sys_fs_read(int fd, void *buf, uint64_t nbytes, uint64_t *nread);
803 	0x323 	CEXDEXDECR 		sys_fs_write 	CellFsErrno sys_fs_write(int fd, const void *buf, uint64_t nbytes, uint64_t *nwrite);
804 	0x324 	CEXDEXDECR 		sys_fs_close 	CellFsErrno sys_fs_close(int fd);
805 	0x325 	CEXDEXDECR 		sys_fs_opendir 	CellFsErrno sys_fs_opendir(const char *path, int *fd);
806 	0x326 	CEXDEXDECR 		sys_fs_readdir 	CellFsErrno sys_fs_readdir(int fd, CellFsDirent *dir, uint64_t *nread);
807 	0x327 	CEXDEXDECR 		sys_fs_closedir 	CellFsErrno sys_fs_closedir(int fd);
808 	0x328 	CEXDEXDECR 		sys_fs_stat 	CellFsErrno sys_fs_stat(const char *path, CellFsStat *sb);
809 	0x329 	CEXDEXDECR 		sys_fs_fstat 	CellFsErrno sys_fs_fstat(int fd, CellFsStat *sb);
810 	0x32A 	CEXDEXDECR 		sys_fs_link 	int sys_fs_link(char const*, char const*)
811 	0x32B 	CEXDEXDECR 		sys_fs_mkdir 	CellFsErrno sys_fs_mkdir(const char *path, CellFsMode mode);
812 	0x32C 	CEXDEXDECR 		sys_fs_rename 	CellFsErrno sys_fs_rename(const char *from, const char *to);
813 	0x32D 	CEXDEXDECR 		sys_fs_rmdir 	CellFsErrno sys_fs_rmdir(const char *path);
814 	0x32E 	CEXDEXDECR 		sys_fs_unlink 	CellFsErrno sys_fs_unlink(const char *path);
815 	0x32F 	CEXDEXDECR 		sys_fs_utime 	CellFsErrno sys_fs_utime(const char *path, const CellFsUtimbuf *timep);
816 	0x330 	CEXDEXDECR 		sys_fs_access 	int sys_fs_access(char cont*, int)
817 	0x331 	CEXDEXDECR 		sys_fs_fcntl 	int sys_fs_fcntl(int, int, void *, unsigned long)
818 	0x332 	CEXDEXDECR 		sys_fs_lseek 	CellFsErrno sys_fs_lseek(int fd, int64_t offset, int whence, uint64_t *pos);
819 	0x333 	CEXDEXDECR 		sys_fs_fdatasync 	int sys_fs_datasync(int)
820 	0x334 	CEXDEXDECR 		sys_fs_fsync 	CellFsErrno sys_fs_fsync(int fd);
821 	0x335 	CEXDEXDECR 		sys_fs_fget_block_size 	int sys_fs_fget_block_size(int, unsigned long *, unsigned long *, unsigned long *, int *)
822 	0x336 	CEXDEXDECR 		sys_fs_get_block_size 	int sys_fs_get_block_size(char const*, unsigned long *, unsigned long *, unsigned long *)
823 	0x337 	CEXDEXDECR 		sys_fs_acl_read 	int sys_fs_acl_read(char const*, CellFsAcl *)
824 	0x338 	CEXDEXDECR 		sys_fs_acl_write 	int sys_fs_acl_read(char const*, CellFsAcl *)
825 	0x339 	CEXDEXDECR 		sys_fs_lsn_get_cda_size 	int sys_fs_lsn_get_cda_size(int, unsigned long *)
826 	0x33A 	CEXDEXDECR 		sys_fs_lsn_get_cda 	int sys_fs_lsn_get_cda(int, CellFsCda *, unsigned long, unsigned long *)
827 	0x33B 	CEXDEXDECR 		sys_fs_lsn_lock 	int sys_fs_lsn_lock(int)
828 	0x33C 	CEXDEXDECR 		sys_fs_lsn_unlock 	int sys_fs_lsn_unlock(int)
829 	0x33D 	CEXDEXDECR 		sys_fs_lsn_read 	int sys_fs_lsn_read(int, CellFsCda const*, unsigned long)
830 	0x33E 	CEXDEXDECR 		sys_fs_lsn_write 	int sys_fs_lsn_write(int, CellFsCda const*, unsigned long)
831 	0x33F 	CEXDEXDECR 		sys_fs_truncate 	CellFsErrno sys_fs_truncate(const char *path, uint64_t size);
832 	0x340 	CEXDEXDECR 		sys_fs_ftruncate 	CellFsErrno sys_fs_ftruncate(int fd, uint64_t size);
833 	0x341 	CEXDEXDECR 		sys_fs_symbolic_link 	int sys_fs_symbolic_link(char const*, char const*)
834 	0x342 	CEXDEXDECR 		sys_fs_chmod 	CellFsErrno sys_fs_chmod(const char *path, CellFsMode mode);
835 	0x343 	CEXDEXDECR 		sys_fs_chown 	int sys_fs_chown(char const*, int, int)
836 	0x344 	CEXDEXDECR 		sys_fs_newfs 	int sys_fs_newfs(char const* deviceName, char const*, int, char const**)
837 	0x345 	CEXDEXDECR 		sys_fs_mount 	int sys_fs_mount(char const* deviceName, char const*, char const*, int, int, int, char const**)
Example: Device Name (e.g CELL_FS_IOS:BUILTIN_FLSH1), Device File System (e.g CELL_FS_FAT), Device Path (e.g. /dev_flash), 0, Write Protection (0 or 1), 0, 0, 0
838 	0x346 	CEXDEXDECR 		sys_fs_unmount 	int sys_fs_unmount(char const*, int, int)
Parameters: Device Path (e.g. /dev_flash)
839 	0x347 	CEXDEXDECR 		sys_fs_sync 	int sys_fs_sync(const char *dir) Parameter: Device Path (e.g. /dev_hdd0)
840 	0x348 	CEXDEXDECR 		sys_fs_disk_free 	int sys_fs_disk_free(char const*, unsigned long *, unsigned long *)
841 	0x349 	CEXDEXDECR 		sys_fs_get_mount_info_size 	int sys_fs_get_mount_info_size(unsigned long *)
842 	0x34A 	CEXDEXDECR 		sys_fs_get_mount_info 	int sys_fs_get_mount_info(CellFsMountInformation *, unsigned long, unsigned long *)
843 	0x34B 	CEXDEXDECR 		sys_fs_get_fs_info_size 	int sys_fs_get_fs_info_size(unsigned long *)
844 	0x34C 	CEXDEXDECR 		sys_fs_get_fs_info 	int sys_fs_get_fs_info(ulong, ulong*, CellFsInfo *)
845 	0x34D 	CEXDEXDECR 		sys_fs_mapped_allocate 	int sys_fs_mapped_allocate(int, unsigned long, void **)
846 	0x34E 	CEXDEXDECR 		sys_fs_mapped_free 	int sys_fs_mapped_free(int, void *)
847 	0x34F 	CEXDEXDECR 		sys_fs_truncate2 	int sys_fs_ftruncate2(int fd, uint64_t size);
#process socket service syscalls (861-864)
860 	0x35C 	CEXDEXDECR 	AuthID 	syscall_sys_ss_get_cache_of_analog_sunset_flag 	int syscall_sys_ss_get_cache_of_analog_sunset_flag(out:uint8_t[1])
861 	0x35D 	CEXDEXDECR 	root 		gamesave_storage_manager_if(uint32_t packetid (0-0x13), uint8_t buf[0xB8], const char* path, int32_t len, int32_t unk2, int32_t unk3, 0, 0);
862 	0x35E 	CEXDEXDECR 	root 		vtrm_manager_if (Interface)
863 	0x35F 	CEXDEXDECR 	root 		update_manager_if (Interface)
864 	0x360 	CEXDEXDECR 	dbg 		storage_manager_if (Interface)
#sys_ss/sys_get Syscalls (865-879)
865 	0x361 	CEXDEXDECR 	root AuthID 	sys_ss_random_number_generator 	int sys_ss_random_number_generator(id,buffer,size), alias sys_get_random_number
866 	0x362 	CEXDEXDECR 	root 		secure_rtc_manager_if (Interface)
867 	0x363 	CEXDEXDECR 	root 		aim_manager_if (Interface)
868 	0x364 	CEXDEXDECR 	root / dbg AuthID 		indi_info_manager_if (Interface)
869 	0x365 	CEXDEXDECR 	root 		fdm_manager_if ?
870 	0x366 	CEXDEXDECR 		sys_ss_get_console_id 	int sys_ss_get_console_id(uint8_t *buf) //returns IDPS in buf
871 	0x367 	CEXDEXDECR 	dbg 	sys_ss_access_control_engine 	3 params

(1,sys_pid_t,out:uint8_t [8]) 
(2,out:uint8_t [8],0) // returns Authentication_IDs
(3,out:uint8_t [8],0)

872 	0x368 	CEXDEXDECR 		sys_ss_get_open_psid 	int sys_ss_get_open_psid(CellSsOpenPSID *ptr) ; typedef struct CellSsOpenPSID { uint64_t high; uint64_t low;}
873 	0x369 	CEXDEXDECR 		sys_ss_get_cache_of_product_mode 	int sys_ss_get_cache_of_product_mode(uint8_t *ptr [1]);
874 	0x36A 	CEXDEXDECR 		sys_ss_get_cache_of_flash_ext_flag 	int sys_ss_get_cache_of_flash_ext_flag(uint8_t *flag [1])
875 	0x36B 	CEXDEXDECR 		sys_ss_get_boot_device 	int sys_ss_get_boot_device(uint8_t * buf [8]);
876 	0x36C 	CEXDEXDECR 		sys_ss_disc_access_control 	2Params: 0x20000(=get_disc_access_control),uint32_t * disc_access / 0x20001(=set_disc_access_control),1
877 	0x36D 	CEXDEXDECR 	root 	sys_ss_~utoken_if 	syscall(877,0x25003=Decrypt or 0x25004 or 0x25005=Encrypt or 0x25006=(copy syscall table to user), uint8_t *token, 0xC50 (size)), user_token_manager_if
878 	0x36E 	CEXDEXDECR 		sys_ss_ad_sign 	syscall(878, 0x26001, in_buffer[0x14], out_buffer[0x80])
879 	0x36F 	CEXDEXDECR 		sys_ss_media_id 	syscall(879, 0x10001, out_buffer[0x10])
#sys_deci3 Syscalls (880-884)
880 	0x370 	DEX DECR 		sys_deci3_open 	int sys_deci3_open(sys_deci3_protocol_t protocol, sys_deci3_port_t port, void *option, sys_deci3_session_t * session_id);
881 	0x371 	DEX DECR 		sys_deci3_create_event_path 	int sys_deci3_create_event_path(sys_deci3_session_t session_id, size_t bufsize, sys_event_queue_t event_queue_id);
882 	0x372 	DEX DECR 		sys_deci3_close 	int sys_deci3_close(sys_deci3_session_t session_id);
883 	0x373 	DEX DECR 		sys_deci3_send 	int sys_deci3_send(sys_deci3_session_t session_id, uint8_t * buf, __CSTD size_t size);
884 	0x374 	DEX DECR 		sys_deci3_receive 	int sys_deci3_receive(sys_deci3_session_t session_id, uint8_t * buf, __CSTD size_t size);
885 	0x375 	DECR 		sys_deci3_open2 	
889 	0x379 	DECR 	root 	sys_ 	
890 	0x37A 			sys_deci3_initialize 	
891 	0x37B 			sys_deci3_terminate 	
892 	0x37C 			sys_deci3_debug_mode 	
893 	0x37D 			sys_deci3_show_status 	
894 	0x37E 			sys_deci3_echo_test 	
895 	0x37F 			sys_deci3_send_dcmp_packet 	
896 	0x380 			sys_deci3_dump_cp_register 	
897 	0x381 			sys_deci3_dump_cp_buffer 	
899 	0x383 			sys_deci3_test 	
#sys_dbg Syscalls (900-970)
900 	0x384 	CEXDEXDECR 		sys_dbg_stop_processes 	2 params: sys_pid_t pid, 1
901 	0x385 	DEX DECR 		sys_dbg_continue_processes 	
902 	0x386 	CEXDEXDECR 		sys_dbg_stop_threads 	2 params: in/out, len
903 	0x387 	CEXDEXDECR 		sys_dbg_continue_threads 	2 params: uint64_t *inbuff, int length(0 or ... or 8)
904 	0x388 	DEX DECR 		sys_dbg_read_process_memory 	int sys_dbg_read_process_memory(sys_pid_t pid, uint64_t process_ea, uint32_t size, void* data)
905 	0x389 	DEX DECR 		sys_dbg_write_process_memory 	int sys_dbg_write_process_memory(sys_pid_t pid, uint64_t process_ea, uint32_t size, const void* data)
906 	0x38A 	CEXDEXDECR 		sys_dbg_read_thread_register 	3 Params: uint8_t [0x10], uint64_t *, uint8_t[0x10]
907 	0x38B 	DEX DECR 		sys_dbg_write_thread_register 	
908 	0x38C 	DEX DECR 		sys_dbg_get_process_list 	int sys_dbg_get_process_list(sys_pid_t* pids, uint64_t* max, uint64_t* count)
909 	0x38D 	CEXDEXDECR 		sys_dbg_get_thread_list 	int sys_dbg_get_thread_list( sys_pid_t pid, sys_ppu_thread_t* ids, uint64_t* ids_num, uint64_t* all_ids_num)
910 	0x38E 	CEXDEXDECR 		sys_dbg_get_thread_info 	2 Params: uint8_t * [0x10] {type,thread id?}, uint8_t [0x80]

1 spu_thread
2 spu_thread_group
0 ppu_thread

911 	0x38F 	CEXDEXDECR 		sys_dbg_spu_thread_read_from_ls 	4 Params: spu thread id,, size, uint8_t[size]
912 	0x390 	DEX DECR 		sys_dbg_spu_thread_write_to_ls 	
913 	0x391 	DEX DECR 		sys_dbg_kill_process 	int sys_dbg_kill_process(sys_pid_t pid)
914 	0x392 	CEXDEXDECR 		sys_dbg_get_process_info 	int sys_dbg_get_process_info(sys_pid_t pid, sys_process_info_t* info)
915 	0x393 	DEX DECR 		sys_dbg_set_run_control_bit_to_spu 	
916 	0x394 	DEX DECR 		sys_dbg_spu_thread_get_exception_cause 	
917 	0x395 	DEX DECR 		sys_dbg_create_kernel_event_queue 	
918 	0x396 	DEX DECR 		sys_dbg_read_kernel_event_queue 	
919 	0x397 	DEX DECR 		sys_dbg_destroy_kernel_event_queue 	
920 	0x398 	DEX DECR 		sys_dbg_get_process_event_ctrl_flag 	
921 	0x399 	DEX DECR 		sys_dbg_set_process_event_cntl_flag 	
922 	0x39A 	DEX DECR 		sys_dbg_get_spu_thread_group_event_cntl_flag 	
923 	0x39B 	DEX DECR 		sys_dbg_set_spu_thread_group_event_cntl_flag 	
924 	0x39C 	DEX DECR 			
925 	0x39D 	DEX DECR 		sys_dbg_get_raw_spu_list 	
926 	0x39E 	DEX DECR 			
927 	0x3A0 	DEX DECR 			
928 	0x3A1 	DEX DECR 			
929 	0x3A2 	DEX DECR 			
930 	0x3A3 	DEX DECR 			
931 	0x3A4 	DEX DECR 			
932 	0x3A4 	DEX DECR 		sys_dbg_get_mutex_list 	
933 	0x3A5 	CEXDEXDECR 		sys_dbg_get_mutex_information 	int sys_dbg_get_mutex_information(sys_pid_t id, sys_mutex_t id, sys_dbg_mutex_information_t* info )
934 	0x3A6 	DEX DECR 		sys_dbg_get_cond_list 	
935 	0x3A7 	CEXDEXDECR 		sys_dbg_get_cond_information 	int sys_dbg_get_cond_information ( sys_pid_t id, sys_cond_t id, sys_dbg_cond_information_t* info )
936 	0x3A8 	DEX DECR 		sys_dbg_get_rwlock_list 	
937 	0x3A9 	CEXDEXDECR 		sys_dbg_get_rwlock_information 	int sys_dbg_get_rwlock_information ( sys_pid_t id, sys_rwlock_t id, sys_dbg_rwlock_information_t* info )
938 	0x3AA 	DEX DECR 		sys_dbg_get_lwmutex_list 	
939 	0x3AB 	DEX DECR 		sys_dbg_get_address_from_dabr 	int sys_dbg_get_address_from_dabr ( sys_pid_t id, uint64_t* addr, uint64_t* ctrl_flag )
940 	0x3AC 	DEX DECR 		sys_dbg_set_address_to_dabr 	int sys_dbg_set_address_to_dabr ( sys_pid_t id, uint64_t addr, uint64_t ctrl_flag )
941 	0x3AD 	CEXDEXDECR 		sys_dbg_get_lwmutex_information 	int sys_dbg_get_lwmutex_information ( sys_pid_t id, sys_lwmutex_pseudo_id_t id, sys_dbg_lwmutex_information_t* info )
942 	0x3AE 	DEX DECR 		sys_dbg_get_event_queue_list 	
943 	0x3AF 	CEXDEXDECR 		sys_dbg_get_event_queue_information 	int sys_dbg_get_event_queue_information ( sys_pid_t id, sys_event_queue_t id, sys_dbg_event_queue_information_t* info )
944 	0x3B0 	CEXDEXDECR 		sys_dbg_initialize_ppu_exception_handler 	int sys_dbg_initialize_ppu_exception_handler( sys_event_queue_t * equeue_id)
945 	0x3B1 	CEXDEXDECR 	dbg 	sys_dbg_finalize_ppu_exception_handler 	int sys_dbg_finalize_ppu_exception_handler ( sys_event_queue_t equeue_id )
946 	0x3B2 	DEX DECR 		sys_dbg_get_semaphore_list 	
947 	0x3B3 	CEXDEXDECR 		sys_dbg_get_semaphore_information 	int sys_dbg_get_semaphore_information (sys_pid_t id, sys_semaphore_t id, sys_dbg_semaphore_information_t* info )
948 	0x3B4 	DEX DECR 		sys_dbg_get_kernel_thread_list 	
949 	0x3B5 	DEX DECR 		sys_dbg_get_kernel_thread_info 	
950 	0x3B6 	DEX DECR 		sys_dbg_get_lwcond_list 	
951 	0x3B7 	CEXDEXDECR 		sys_dbg_get_lwcond_information 	int sys_dbg_get_lwcond_information (sys_pid_t id, sys_lwcond_pseudo_id_t id, sys_dbg_lwcond_information_t* info )
952 	0x3B8 	DEX DECR 		sys_dbg_create_scratch_data_area_ext 	
953 	0x3B9 	DEX DECR 		sys_dbg_vm_get_page_information 	int sys_dbg_vm_get_page_information (sys_pid_t id, sys_addr_t addr, unsigned int num, sys_vm_page_information_t *pageinfo )
954 	0x3BA 	DEX DECR 		sys_dbg_vm_get_info 	
955 	0x3BB 	DEX DECR 		sys_dbg_enable_floating_point_enabled_exception 	int sys_dbg_enable_floating_point_enabled_exception ( sys_ppu_thread_t id )
956 	0x3BC 	DEX DECR 		sys_dbg_disable_floating_point_enabled_exception 	int sys_dbg_disable_floating_point_enabled_exception ( sys_ppu_thread_t id )
957 	0x3BD 	CEXDEXDECR 		sys_dbg_get_process_memory_container_information 	(u32 proc_id, dbg_mc_info *mc_info[count], u32 *count)
959 	0x3BF 	CEXDEXDECR 		sys_dbg_(send event flags?) 	4 Params: id, uint64_t,uint64_t,uint64_t
960 	0x3C0 	DECR 		sys_control_performance_monitor? 	int sys_control_performance_monitor? (int id, 0 / *out ) - Controls Performance Monitor on the Cell Broadband Engine syscall
961 	0x3C1 	DECR 			
962 	0x3C2 	DECR 			
963 	0x3C3 	DECR 			
964 	0x3C4 	DECR 			
965 	0x3C5 	DECR 			
966 	0x3C6 	DECR 			
967 	0x3C7 	DECR 			
968 	0x3C8 	DECR 			
969 	0x3C9 	DECR 			
970 	0x3CA 	DEX DECR 		sys_dbg_get_event_flag_list 	
971 	0x3CB 	CEXDEXDECR 		sys_dbg_get_event_flag_information 	int sys_dbg_get_event_flag_information ( sys_pid_t id, sys_event_flag_t id, sys_dbg_event_flag_information_t* info )
972 	0x3CC 	CEXDEXDECR 		sys_dbg_(send event flags?) 	1 Param: uint8_t [0x48]
973 	0x3CD 	DEX DECR 			
974 	0x3CE 	CEXDEXDECR 			sc(0x3CE, in:(ppu)thread_id, out:uint8_t[0x440])
975 	0x3CF 	CEXDEXDECR 		sys_dbg_read_spu_thread_context2 	int sys_dbg_read_spu_thread_context2( sys_spu_thread_t id, sys_dbg_spu_thread_context2_t* spu_context )
976 	0x3D0 	CEXDEXDECR 		sys_crypto_engine_create 	int sys_crypto_engine_create(sys_pid_t* id);
977 	0x3D1 	CEXDEXDECR 		sys_crypto_engine_destroy 	int sys_crypto_engine_destroy(sys_pid_t id);
978 	0x3D2 	CEXDEXDECR 	root 	sys_crypto_engine_hasher_prepare 	int sys_crypto_engine_hasher_prepare(sys_pid_t id, int32_t hash_key_index); /* uses HMAC-SHA1 with key size of 0x14 bytes, keys are generated by VTRM (master) */
979 	0x3D3 	CEXDEXDECR 		sys_crypto_engine_hasher_run 	int sys_crypto_engine_hasher_run(sys_pid_t id, const void* data, uint32_t data size); /* splits data by chunks of 0x400 bytes max */
980 	0x3D4 	CEXDEXDECR 		sys_crypto_engine_hasher_get_hash 	int sys_crypto_engine_hasher_get_hash(sys_pid_t id, void* buffer, uint32_t max_buffer_size /* >= 0x14 */);
981 	0x3D5 	CEXDEXDECR 	root 	sys_crypto_engine_cipher_prepare 	int sys_crypto_engine_cipher_prepare(sys_pid_t id, int32_t hash_key_index, int32_t mode /* 1:encrypt, 2:decrypt */, int32_t cipher_key_index, const void* iv, uint32_t iv_size); /* uses AES-CBC-128, keys are generated by VTRM (master) */
982 	0x3D6 	CEXDEXDECR 		sys_crypto_engine_cipher_run 	int sys_crypto_engine_cipher_run(sys_pid_t id, const void* input, void* output, uint32_t data_size); /* splits data by chunks of 0x400 bytes max */
983 	0x3D7 	CEXDEXDECR 		sys_crypto_engine_cipher_get_hash 	int sys_crypto_engine_cipher_get_hash(sys_pid_t id, void* buffer, uint32_t max_buffer_size /* >= 0x14 */);
984 	0x3D8 	CEXDEXDECR 		sys_crypto_engine_random_generate 	int sys_crypto_engine_random_generate(void* buffer, uint32_t max_buffer_size /* >= 0x10 */);
985 	0x3D9 	CEXDEXDECR 	root 	sys_dbg_get_console_type? 	returns Console Type, syscall(985,uint64_t * type)

1=CEX
2=DEX
3=TOOL

986 	0x3DA 	CEXDEXDECR 	root dbg 		seems to return Game Application Title ID , syscall(986,out:uint8[0x40])
987 	0x3DB 	CEXDEXDECR 	root 		syscall(987,0 or 1, uint64_t data), example: 0, 0x8000100000020000 (no root flags required)
example: 1, uint64_t data (requires root flags AND QA-Enabled, sends data to vsh process)
988 	0x3DC 	CEX 		sys_dbg_(something)_ppu_exception_handler 	2 Params: syscall(988,int i,0) , i <0x10 (1 or 2 or 4 or 8 or 0x10)
989 	0x3DD 	CEXDEXDECR 			2 Params: syscall(989, (spu) thread_id ,out:uint8[0x20]) 